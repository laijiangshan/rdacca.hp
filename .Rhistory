#' @return \item{Method_Type}{The type of canonical analysis and the type of total explained variation.}
#' @return \item{R.squared}{A mtrix listing independent effect and its percentage to total explained variation for each explanatory variable.}
#' @return \item{Commonality}{If trace=TRUE,a mtrix listing tha value and percentage of all commonality (2^N-1 for N explanatory variables).}
#' @return \item{Var.part}{A matrix listing independent effect and its percentage to total explained variation for each explanatory variable.}
#' @author {Jiangshan Lai} \email{lai@ibcas.ac.cn}
#' @author {Pedro Peres-Neto} \email{pedro.peres-neto@concordia.ca}
#' @export
#'@examples
#'library(vegan)
#'data(mite)
#'data(mite.env)
#'#Hellinger-transform the species dataset for RDA to deal with the "double zero" problem
#'mite.hel <- decostand(mite, "hellinger")
#'rdacca.hp(mite.hel,mite.env,method="RDA",type="adjR2")
#'rdacca.hp(vegdist(mite),mite.env,method="dbRDA",type="adjR2")
#'rdacca.hp(mite,mite.env,method="CCA",type="adjR2")
rdacca.hp <- function (dv,iv,method=c("RDA","dbRDA","CCA"),type=c("adjR2","R2"),trace = FALSE)
{
if(sum(is.na(dv))>=1|sum(is.na(iv))>=1)
{cat("Error: NA is not allowed in this analysis")}
else
{method <- method[1]
type <- type[1]
if(method=="dbRDA"){
if(!inherits(dv, "dist"))
return("dv should be a 'dist' matrix for dbRDA method")
}
if(method=="RDA")
{dv<-scale(dv,scale=F)}
iv <- data.frame(iv)
ivname <- colnames(iv)
iv.name <- ivname
nvar <- dim(iv)[2]
if (nvar < 2)
stop("Analysis not conducted. Insufficient number of explanatory variables.")
totalN <- 2^nvar - 1
binarymx <- matrix(0, nvar, totalN)
for (i in 1:totalN) {
binarymx <- creatbin(i, binarymx)
}
commonM <- matrix(nrow = totalN, ncol = 3)
for (i in 1:totalN) {
tmp <- iv[as.logical(binarymx[, i])]
tmp.design <- as.matrix(stats::model.matrix(~ ., tmp))
tmp.design.ct <- as.matrix(data.frame(scale(tmp.design,scale=FALSE))[-1])
if(method=="CCA")
{gfa=vegan::RsquareAdj(vegan::cca(dv~.,data=data.frame(tmp.design.ct)))
if(type=="R2")commonM[i, 2]=gfa$r.squared
if(type=="adjR2")commonM[i, 2]=gfa$adj.r.squared
}
if(method=="RDA"||method=="dbRDA")
{gfa=Canonical.Rsq(dv,tmp.design.ct,method=method)
if(type=="R2")commonM[i, 2]=gfa$unadj
if(type=="adjR2")commonM[i, 2]=gfa$adj
}
}
commonlist <- vector("list", totalN)
seqID <- vector()
for (i in 1:nvar) {
seqID[i] = 2^(i-1)
}
for (i in 1:totalN) {
bit <- binarymx[1, i]
if (bit == 1)
ivname <- c(0, -seqID[1])
else ivname <- seqID[1]
for (j in 2:nvar) {
bit <- binarymx[j, i]
if (bit == 1) {
alist <- ivname
blist <- genList(ivname, -seqID[j])
ivname <- c(alist, blist)
}
else ivname <- genList(ivname, seqID[j])
}
ivname <- ivname * -1
commonlist[[i]] <- ivname
}
for (i in 1:totalN) {
r2list <- unlist(commonlist[i])
numlist  <-  length(r2list)
ccsum  <-  0
for (j in 1:numlist) {
indexs  <-  r2list[[j]]
indexu  <-  abs(indexs)
if (indexu != 0) {
ccvalue  <-  commonM[indexu, 2]
if (indexs < 0)
ccvalue  <-  ccvalue * -1
ccsum  <-  ccsum + ccvalue
}
}
commonM[i, 3]  <-  ccsum
}
orderList <- vector("list", totalN)
index  <-  0
for (i in 1:nvar) {
for (j in 1:totalN) {
nbits  <-  sum(binarymx[, j])
if (nbits == i) {
index  <-  index + 1
commonM[index, 1] <- j
}
}
}
outputcommonM <- matrix(nrow = totalN + 1, ncol = 2)
totalRSquare <- sum(commonM[, 3])
for (i in 1:totalN) {
outputcommonM[i, 1] <- round(commonM[commonM[i,
1], 3], digits = 4)
outputcommonM[i, 2] <- round((commonM[commonM[i,
1], 3]/totalRSquare) * 100, digits = 2)
}
outputcommonM[totalN + 1, 1] <- round(totalRSquare,
digits = 4)
outputcommonM[totalN + 1, 2] <- round(100, digits = 4)
rowNames  <-  NULL
for (i in 1:totalN) {
ii  <-  commonM[i, 1]
nbits  <-  sum(binarymx[, ii])
cbits  <-  0
if (nbits == 1)
rowName  <-  "Unique to "
else rowName  <-  "Common to "
for (j in 1:nvar) {
if (binarymx[j, ii] == 1) {
if (nbits == 1)
rowName  <-  paste(rowName, iv.name[j], sep = "")
else {
cbits  <-  cbits + 1
if (cbits == nbits) {
rowName  <-  paste(rowName, "and ", sep = "")
rowName  <-  paste(rowName, iv.name[j], sep = "")
}
else {
rowName  <-  paste(rowName, iv.name[j], sep = "")
rowName  <-  paste(rowName, ", ", sep = "")
}
}
}
}
rowNames  <-  c(rowNames, rowName)
}
rowNames  <-  c(rowNames, "Total")
rowNames <- format.default(rowNames, justify = "left")
colNames <- format.default(c("Fractions", " % Total"),
justify = "right")
dimnames(outputcommonM) <- list(rowNames, colNames)
VariableImportance <- matrix(nrow = nvar, ncol = 2)
for (i in 1:nvar) {
VariableImportance[i, 1] <-  round(sum(binarymx[i, ] * (commonM[,
3]/apply(binarymx,2,sum))), digits = 4)
}
total=round(sum(VariableImportance[,1]),4)
VariableImportance[, 2] <- round(100*VariableImportance[, 1]/total,2)
dimnames(VariableImportance) <- list(iv.name, c("Independent","I.perc(%)"))
if(trace)
{outputList <- list(Method_Type=c(method,type),R.squared=total,Commonality = outputcommonM, Var.part = VariableImportance)}
else
{outputList<-list(Method_Type=c(method,type),R.squared=total,Var.part= VariableImportance)}
#class(outputList) <- "rdacca.hp" # Class definition
return(outputList)
}
}
rdacca.hp(mite,mite.env,method="CCA",type="adjR2")
document()
library(devtools)
document()
library(devtools)
document()
document()
library(devtools)
document()
build()
library(devtools)
document()
document()
build()
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
mite.xy
library(devtools)
document()
build()
library(devtools)
document()
library(devtools)
document()
build()
build()
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
library(devtools)
document()
document()
library(devtools)
document()
library(devtools)
document()
build()
document()
build()
library(devtools)
document()
library(devtools)
document()
document()
document()
build()
document()
document()
build()
document()
build()
22+27
11780/730
library(devtools)
document()
build()
library(devtools)
document()
build()
document()
build()
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
build()
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
2^18
?save
library(randomForest)
?randomForest
library(ape)
library(nlme)
?varccomp
?varcomp
data(carnivora)
library(nlme)
m <- lme(log10(SW) ~ 1, random = ~ 1|Order/SuperFamily/Family/Genus, data=carnivora)
v <- varcomp(m, TRUE, TRUE)
plot(v)
m
V
v
sum(v)
?loess
cars.lo <- loess(dist ~ speed, cars)
predict(cars.lo, data.frame(speed = seq(5, 30, 1)), se = TRUE)
# to allow extrapolation
cars.lo2 <- loess(dist ~ speed, cars,
control = loess.control(surface = "direct"))
predict(cars.lo2, data.frame(speed = seq(5, 30, 1)), se = TRUE)
cars.lo <- loess(dist ~ speed, cars)
predict(cars.lo, data.frame(speed = seq(5, 30, 1)), se = TRUE)
# to get extrapolation
cars.lo2 <- loess(dist ~ speed, cars,
control = loess.control(surface = "direct"))
predict(cars.lo2, data.frame(speed = seq(5, 30, 1)), se = TRUE)
54*1.59
?model.avg
??model.avg
fm1 <- lm(y ~ ., data = Cement, na.action = na.fail)
(ms1 <- dredge(fm1))
library(MuMIn)
fm1 <- lm(y ~ ., data = Cement, na.action = na.fail)
(ms1 <- dredge(fm1))
summary(fm1)
summary(model.avg(ms1))
library(devtools)
document()
build()
library(devtools)
document()
document()
library(devtools)
document()
build()
?cmdscale
83/54
75/49.3
76/49.3
library(devtools)
library(devtools)
document()
library(devtools)
document()
library(vegan)
data(mite)
data(mite.env)
data(mite.xy)
data(mite.pcnm)
#Hellinger-transform the species dataset for RDA
mite.hel <- decostand(mite, "hellinger")
rdacca.hp(mite.hel,mite.env,method="RDA",type="adjR2")
rdacca.hp(vegdist(mite),mite.env,method="dbRDA",type="adjR2")
rdacca.hp(mite,mite.env,method="CCA",type="adjR2")
iv <- list(env=mite.env,xy=mite.xy,pcnm=mite.pcnm)
rdacca.hp(mite.hel,iv,method="RDA",var.part = TRUE)
rdacca.hp(vegdist(mite),iv,method="dbRDA",var.part = TRUE)
rdacca.hp(mite,iv,method="CCA",var.part = TRUE)
library(devtools)
document()
avc<-rdacca.hp(mite.hel,mite.env,method="RDA",type="adjR2")
plot(avc)
plot(avc,plot.perc=TRUE)
library(reshape)
plot(avc)
class(avc)
avc
x=avc
x
rownames(x$Hier.part)
tips3=data.frame(variable=rownames(x$Hier.part), value=as.numeric(x$Hier.part[,"I.perc(%)"]))
gg=ggplot2::ggplot(tips3, ggplot2::aes(x = stats::reorder(variable, -value), y = value)) + ggplot2::geom_bar(stat = "identity")+
ggplot2::theme_minimal()+ggplot2::labs(x="Variables",y="% Individual effect to Rsquared (%I)")+ ggplot2::theme(axis.text = element_text(size = 10))+ ggplot2::theme(axis.title = element_text(size = 13))}
tips3=data.frame(variable=rownames(x$Hier.part), value=as.numeric(x$Hier.part[,"I.perc(%)"]))
tips3
gg=ggplot2::ggplot(tips3, ggplot2::aes(x = stats::reorder(variable, -value), y = value)) + ggplot2::geom_bar(stat = "identity")+
ggplot2::theme_minimal()+ggplot2::labs(x="Variables",y="% Individual effect to Rsquare (%I)")+ ggplot2::theme(axis.text = element_text(size = 10))+ ggplot2::theme(axis.title = element_text(size = 13))
gg
tips2=data.frame(variable=rownames(x$Hier.part), value=as.numeric(x$Hier.part[,"Individual"]))
gg=ggplot2::ggplot(tips2, ggplot2::aes(x = stats::reorder(variable, -value), y = value)) + ggplot2::geom_bar(stat = "identity")+
ggplot2::theme_minimal()+ggplot2::labs(x="Variables",y="Individual effect")+ ggplot2::theme(axis.text = element_text(size = 10))+ ggplot2::theme(axis.title = element_text(size = 13))
gg
tips2
tips3
plot.rdaccahp <- function(x, plot.perc=FALSE,...)
{
if(class(x)!="rdaccahp")
{
stop("x should be the output of rdacca.hp()")
}
if(plot.perc)
{tips3=data.frame(variable=rownames(x$Hier.part), value=as.numeric(x$Hier.part[,"I.perc(%)"]))
gg=ggplot2::ggplot(tips3, ggplot2::aes(x = stats::reorder(variable, -value), y = value)) + ggplot2::geom_bar(stat = "identity")+
ggplot2::theme_minimal()+ggplot2::labs(x="Variables",y="% Individual effect to Rsquare (%I)")+ ggplot2::theme(axis.text = element_text(size = 10))+ ggplot2::theme(axis.title = element_text(size = 13))}
else
{tips2=data.frame(variable=rownames(x$Hier.part), value=as.numeric(x$Hier.part[,"Individual"]))
gg=ggplot2::ggplot(tips2, ggplot2::aes(x = stats::reorder(variable, -value), y = value)) + ggplot2::geom_bar(stat = "identity")+
ggplot2::theme_minimal()+ggplot2::labs(x="Variables",y="Individual effect")+ ggplot2::theme(axis.text = element_text(size = 10))+ ggplot2::theme(axis.title = element_text(size = 13))
}
print(gg)
}
plot(avc)
plot(avc,plot.perc=TRUE)
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
avc<-rdacca.hp(mite.hel,mite.env,method="RDA",type="adjR2")
plot(avc)
library(vegan)
data(mite)
data(mite.env)
data(mite.xy)
data(mite.pcnm)
#Hellinger-transform the species dataset for RDA
mite.hel <- decostand(mite, "hellinger")
avc<-rdacca.hp(mite.hel,mite.env,method="RDA",type="adjR2")
plot(avc)
plot(avc,plot.perc=TRUE)
plot.rdaccahp <- function(x, plot.perc=FALSE,...)
{
if(class(x)!="rdaccahp")
{
stop("x should be the output of rdacca.hp()")
}
if(plot.perc)
{tips3=data.frame(variable=rownames(x$Hier.part), value=as.numeric(x$Hier.part[,"I.perc(%)"]))
gg=ggplot2::ggplot(tips3, ggplot2::aes(x = stats::reorder(variable, -value), y = value)) + ggplot2::geom_bar(stat = "identity")+
ggplot2::theme_minimal()+ggplot2::labs(x="Variables",y="% Individual effect to Rsquare (%I)")+ ggplot2::theme(axis.text = element_text(size = 10))+ ggplot2::theme(axis.title = element_text(size = 13))}
else
{tips2=data.frame(variable=rownames(x$Hier.part), value=as.numeric(x$Hier.part[,"Individual"]))
gg=ggplot2::ggplot(tips2, ggplot2::aes(x = stats::reorder(variable, -value), y = value)) + ggplot2::geom_bar(stat = "identity")+
ggplot2::theme_minimal()+ggplot2::labs(x="Variables",y="Individual effect")+ ggplot2::theme(axis.text = element_text(size = 10))+ ggplot2::theme(axis.title = element_text(size = 13))
}
print(gg)
}
plot(avc)
plot(avc,plot.perc=TRUE)
plot.rdaccahp <- function(object, plot.perc=FALSE,...)
{
if(class(object)!="rdaccahp")
{
stop("object should be the output of rdacca.hp()")
}
if(plot.perc)
{tips3=data.frame(variable=rownames(object$Hier.part), value=as.numeric(object$Hier.part[,"I.perc(%)"]))
gg=ggplot2::ggplot(tips3, ggplot2::aes(x = stats::reorder(variable, -value), y = value)) + ggplot2::geom_bar(stat = "identity")+
ggplot2::theme_minimal()+ggplot2::labs(x="Variables",y="% Individual effect to Rsquare (%I)")+ ggplot2::theme(axis.text = element_text(size = 10))+ ggplot2::theme(axis.title = element_text(size = 13))}
else
{tips2=data.frame(variable=rownames(object$Hier.part), value=as.numeric(object$Hier.part[,"Individual"]))
gg=ggplot2::ggplot(tips2, ggplot2::aes(x = stats::reorder(variable, -value), y = value)) + ggplot2::geom_bar(stat = "identity")+
ggplot2::theme_minimal()+ggplot2::labs(x="Variables",y="Individual effect")+ ggplot2::theme(axis.text = element_text(size = 10))+ ggplot2::theme(axis.title = element_text(size = 13))
}
print(gg)
}
plot(avc)
plot(avc,plot.perc=TRUE)
library(devtools)
document()
library(devtools)
document()
install.packages("devtools")
install.packages("devtools")
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
build()
library(rdacca.hp)
mydistdt <- read.csv("HJgeneralists.TRUE.weighted_bNTI.csv",header = TRUE,row.names = 1)
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
?bibentry
library(devtools)
document()
build()
